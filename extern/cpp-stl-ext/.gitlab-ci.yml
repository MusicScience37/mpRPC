image: ubuntu:focal

stages:
  - Check
  - Test with Clang
  - Test with GCC
  - Build Documentation
  - Publish

.retry setting:
  retry:
    max: 2
    when: runner_system_failure

line count:
  extends: .retry setting
  stage: Check
  dependencies: []
  image: registry.gitlab.com/musicscience37_ci/cloc-docker:v1-2
  script:
    - mkdir -p line_count
    - cloc ./
      --exclude-dir=extern,line_count
      --force-lang=C++,h
      --json --out=line_count/line_count.json
  artifacts:
    paths:
      - line_count
    expire_in: "3 mos"

static analysis:
  extends: .retry setting
  stage: Check
  dependencies: []
  image: musicscience37/clang-ci:clang10-v2.2
  before_script:
    - pip3 install junit2html
    - mkdir build_static_analysis
    - cd build_static_analysis
    - git clone https://github.com/PSPDFKit-labs/clang-tidy-to-junit.git
    - cd ../
  script:
    - cmake -S ./ -B build_static_analysis
      -DSTL_EXT_ENABLE_CLANG_TIDY:BOOL=ON
      -DSTL_EXT_TESTING:BOOL=ON
      -DSTL_EXT_ENABLE_CPP_WARNINGS:BOOL=ON
      -DSTL_EXT_ENABLE_BENCH:BOOL=ON
    - cmake --build build_static_analysis
      --target stl_ext_clang_tidy
    - scripts/check_clang_tidy.sh build_static_analysis/clang_tidy
  after_script:
    - cd build_static_analysis/clang_tidy
    - cat $(find $1 -name '*.txt') |
      python3 ../clang-tidy-to-junit/clang-tidy-to-junit.py $(dirname $(pwd)) > clang_tidy_junit.xml
    - python3 -m junit2htmlreport clang_tidy_junit.xml clang_tidy_junit.html
  artifacts:
    paths:
      - build_static_analysis
    reports:
      junit:
        - build_static_analysis/clang_tidy/clang_tidy_junit.xml
    when: always
    expire_in: "3 mos"

.release-test-base:
  extends: .retry setting
  needs: ["line count"]
  dependencies: []
  before_script:
    - pip3 install -r requirements.txt
    - pip3 install junitparser junit2html
    - chmod +xr /usr/local/bin/junitparser
  script:
    - mkdir $BUILD_DIR
    - cmake -S ./ -B $BUILD_DIR
      -DCMAKE_BUILD_TYPE=Release
      -DBUILDNAME:STR=$BUILD_NAME
      -DSTL_EXT_TESTING:BOOL=ON
      -DSTL_EXT_WRITE_JUNIT:BOOL=ON
      -DSTL_EXT_ENABLE_BENCH:BOOL=ON
      -DSTL_EXT_BENCH_IN_TEST:BOOL=ON
    - cd $BUILD_DIR
    - ctest -V -M Experimental -T Configure -T Build -T Test
    - ctest -M Experimental -T Submit
  after_script:
    - scripts/collect_test_results.sh $BUILD_DIR/junit
  artifacts:
    paths:
      - $BUILD_DIR
    reports:
      junit:
        - $BUILD_DIR/junit/stl_ext_test_unified.xml
    when: always
    expire_in: "3 mos"

.debug-test-base:
  extends: .release-test-base
  script:
    - mkdir $BUILD_DIR
    - cmake -S ./ -B $BUILD_DIR
      -DCMAKE_BUILD_TYPE=Debug
      -DBUILDNAME:STR=$BUILD_NAME
      -DSTL_EXT_TESTING:BOOL=ON
      -DSTL_EXT_WRITE_JUNIT:BOOL=ON
      -DSTL_EXT_ENABLE_BENCH:BOOL=ON
      -DSTL_EXT_BENCH_IN_TEST:BOOL=ON
    - cd $BUILD_DIR
    - ctest -V -M Experimental -T Configure -T Build -T Test -T MemCheck
    - ctest -M Experimental -T Submit

clang coverage:
  extends: .release-test-base
  stage: Test with Clang
  image: musicscience37/clang-ci:clang10-v2.2
  variables:
    BUILD_DIR: build_clang_coverage
    BUILD_NAME: clang_coverage
  script:
    - mkdir $BUILD_DIR
    - cmake -S ./ -B $BUILD_DIR
      -DCMAKE_BUILD_TYPE=Debug
      -DBUILDNAME:STR=$BUILD_NAME
      -DSTL_EXT_TESTING:BOOL=ON
      -DSTL_EXT_WRITE_JUNIT:BOOL=ON
      "-DCMAKE_CXX_FLAGS=-fprofile-instr-generate -fcoverage-mapping"
      "-DCMAKE_MODULE_LINKER_FLAGS=-fprofile-instr-generate -fcoverage-mapping"
    - cd $BUILD_DIR
    - mkdir coverage
    - export LLVM_PROFILE_FILE=$(pwd)/coverage/coverage_%p.profraw
    - ctest -V -M Experimental -T Configure -T Build -T Test
    - ctest -M Experimental -T Submit
    - cd ../
    - scripts/collect_llvm_coverage.sh build_clang_coverage
  coverage: '/Line Coverage: \d+\.\d+/'

gcc coverage:
  extends: .release-test-base
  stage: Test with GCC
  image: musicscience37/gcc-ci:gcc10-v2.2
  variables:
    BUILD_DIR: build_gcc_coverage
    BUILD_NAME: gcc_coverage
  script:
    - mkdir $BUILD_DIR
    - cmake -S ./ -B $BUILD_DIR
      -DCMAKE_BUILD_TYPE=Debug
      -DBUILDNAME:STR=$BUILD_NAME
      -DSTL_EXT_TESTING:BOOL=ON
      -DSTL_EXT_WRITE_JUNIT:BOOL=ON
      "-DCMAKE_CXX_FLAGS=--coverage"
      "-DCMAKE_MODULE_LINKER_FLAGS=--coverage"
    - cd $BUILD_DIR
    - ctest -V -M Experimental -T Configure -T Build -T Test
    - ctest -M Experimental -T Coverage || true
    - ctest -M Experimental -T Submit
    - cd ../
    - scripts/collect_gcc_coverage.sh build_gcc_coverage
  coverage: '/Total:\|\s*(\d+\.?\d+?)%/'

clang-10-debug:
  extends: .debug-test-base
  stage: Test with Clang
  image: musicscience37/clang-ci:clang10-v2.2
  variables:
    BUILD_DIR: build_clang10_debug
    BUILD_NAME: clang_10_debug

clang-10-release:
  extends: .release-test-base
  stage: Test with Clang
  image: musicscience37/clang-ci:clang10-v2.2
  variables:
    BUILD_DIR: build_clang10_release
    BUILD_NAME: clang_10_release

gcc-10-debug:
  extends: .debug-test-base
  stage: Test with GCC
  image: musicscience37/gcc-ci:gcc10-v2.2
  variables:
    BUILD_DIR: build_gcc10_debug
    BUILD_NAME: gcc_10_debug

gcc-10-release:
  extends: .release-test-base
  stage: Test with GCC
  image: musicscience37/gcc-ci:gcc10-v2.2
  variables:
    BUILD_DIR: build_gcc10_release
    BUILD_NAME: gcc_10_release

doc:
  extends: .retry setting
  stage: Build Documentation
  needs: ["line count"]
  dependencies: []
  image: musicscience37/sphinx-doxygen:v-2.2
  before_script:
    - pip3 install -r requirements.txt
  script:
    - mkdir build_doc
    - cmake -S ./ -B build_doc
      -DSTL_EXT_BUILD_DOC:BOOL=ON
      -DSTL_EXT_BUILD_LATEX_DOC:BOOL=ON
    - cmake --build build_doc --target stl_ext_doc
  artifacts:
    paths:
      - build_doc
    when: always
    expire_in: "3 mos"

pages:
  extends: .retry setting
  stage: Publish
  only:
    - develop
  needs:
    - doc
    - gcc coverage
    - clang coverage
  dependencies:
    - doc
    - gcc coverage
    - clang coverage
  script:
    - mkdir public
    - mv build_doc/doc/sphinx/html public/sphinx
    - mv build_doc/doc/sphinx/latex/cpp-stl-ext.pdf public/cpp-stl-ext.pdf
    - mv build_doc/doc/doxygen/html public/doxygen
    - mv build_gcc_coverage/coverage/html public/gcc_coverage
    - mv build_clang_coverage/coverage/html public/clang_coverage
  artifacts:
    paths:
      - public
